<?php
/**
 * This file is part of Parser package.
 * 
 * For the full copyright and license information, please view the
 * LICENSE file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Parser;

use Railt\Compiler\Parser\Runtime as SchemaParserRuntime;
use Railt\Compiler\Lexer\NativeStateful as SchemaParserLexer;

/**
 * This class has been auto-generated by the Railt\Compiler\Generator
 */
final class SchemaParser extends SchemaParserRuntime
{
    /**#@+
     * List of SchemaParser::class tokens defined as public constants
     */
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_NAMESPACE = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_IMPORT = 'T_IMPORT';
    public const T_IMPORT_FROM = 'T_IMPORT_FROM';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INPUT_UNION = 'T_INPUT_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';
    /**#@-*/

    public function __construct()
    {
        parent::__construct(new SchemaParserLexer('/\\G(?P<T_AND>&)|(?P<T_OR>\\|)|(?P<T_PARENTHESIS_OPEN>\\()|(?P<T_PARENTHESIS_CLOSE>\\))|(?P<T_BRACKET_OPEN>\\[)|(?P<T_BRACKET_CLOSE>\\])|(?P<T_BRACE_OPEN>{)|(?P<T_BRACE_CLOSE>})|(?P<T_NON_NULL>!)|(?P<T_THREE_DOTS>\\.\\.\\.)|(?P<T_COLON>:)|(?P<T_EQUAL>=)|(?P<T_DIRECTIVE_AT>@)|(?P<T_NUMBER>\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?\\b)|(?P<T_TRUE>true\\b)|(?P<T_FALSE>false\\b)|(?P<T_NULL>null\\b)|(?P<T_BLOCK_STRING>"""(?:\\\\"""|(?!""").|\\s)+""")|(?P<T_STRING>"[^"\\\\]+(\\\\.[^"\\\\]*)*")|(?P<T_NAMESPACE>namespace\\b)|(?P<T_NAMESPACE_SEPARATOR>\\/)|(?P<T_IMPORT>import\\b)|(?P<T_IMPORT_FROM>from\\b)|(?P<T_EXTENDS>extends\\b)|(?P<T_IMPLEMENTS>implements\\b)|(?P<T_ON>on\\b)|(?P<T_TYPE>type\\b)|(?P<T_ENUM>enum\\b)|(?P<T_UNION>union\\b)|(?P<T_INPUT_UNION>inputUnion\\b)|(?P<T_INTERFACE>interface\\b)|(?P<T_SCHEMA>schema\\b)|(?P<T_SCALAR>scalar\\b)|(?P<T_DIRECTIVE>directive\\b)|(?P<T_INPUT>input\\b)|(?P<T_EXTEND>extend\\b)|(?P<T_FRAGMENT>fragment\\b)|(?P<T_VARIABLE>\\$[_A-Za-z][_0-9A-Za-z]*)|(?P<T_NAME>[_A-Za-z][_0-9A-Za-z]*)|(?P<T_WHITESPACE>(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+)|(?P<T_COMMENT>#[^\\n]*)|(?P<T_COMMA>,)|.*?/usS', ['T_WHITESPACE','T_COMMENT','T_COMMA',]), [
                            0 =>
new \Railt\Compiler\Parser\Rule\Repetition(0, 0, 1, ['NamespaceDefinition',], null),
                            1 =>
new \Railt\Compiler\Parser\Rule\Repetition(1, 0, -1, ['DocumentImports',], null),
                            2 =>
new \Railt\Compiler\Parser\Rule\Repetition(2, 0, -1, ['DocumentDefinitions',], null),
                            'Document' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Document', [0,1,2,], '#Document'),
                            'DocumentImports' =>
new \Railt\Compiler\Parser\Rule\Alternation('DocumentImports', ['ImportDefinition','Invocation',], null),
                            'DocumentDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('DocumentDefinitions', ['Extension','Definition',], null),
                            6 =>
new \Railt\Compiler\Parser\Rule\Token(6, 'T_NAME', true),
                            'NameWithoutReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithoutReserved', [6,], '#Name'),
                            8 =>
new \Railt\Compiler\Parser\Rule\Token(8, 'T_NAME', true),
                            9 =>
new \Railt\Compiler\Parser\Rule\Token(9, 'T_TRUE', true),
                            10 =>
new \Railt\Compiler\Parser\Rule\Token(10, 'T_FALSE', true),
                            11 =>
new \Railt\Compiler\Parser\Rule\Token(11, 'T_NULL', true),
                            12 =>
new \Railt\Compiler\Parser\Rule\Token(12, 'T_NAMESPACE', true),
                            13 =>
new \Railt\Compiler\Parser\Rule\Token(13, 'T_IMPORT', true),
                            14 =>
new \Railt\Compiler\Parser\Rule\Token(14, 'T_IMPORT_FROM', true),
                            15 =>
new \Railt\Compiler\Parser\Rule\Token(15, 'T_EXTENDS', true),
                            16 =>
new \Railt\Compiler\Parser\Rule\Token(16, 'T_IMPLEMENTS', true),
                            17 =>
new \Railt\Compiler\Parser\Rule\Token(17, 'T_ON', true),
                            18 =>
new \Railt\Compiler\Parser\Rule\Token(18, 'T_TYPE', true),
                            19 =>
new \Railt\Compiler\Parser\Rule\Token(19, 'T_ENUM', true),
                            20 =>
new \Railt\Compiler\Parser\Rule\Token(20, 'T_UNION', true),
                            21 =>
new \Railt\Compiler\Parser\Rule\Token(21, 'T_INPUT_UNION', true),
                            22 =>
new \Railt\Compiler\Parser\Rule\Token(22, 'T_INTERFACE', true),
                            23 =>
new \Railt\Compiler\Parser\Rule\Token(23, 'T_SCHEMA', true),
                            24 =>
new \Railt\Compiler\Parser\Rule\Token(24, 'T_SCALAR', true),
                            25 =>
new \Railt\Compiler\Parser\Rule\Token(25, 'T_DIRECTIVE', true),
                            26 =>
new \Railt\Compiler\Parser\Rule\Token(26, 'T_INPUT', true),
                            27 =>
new \Railt\Compiler\Parser\Rule\Token(27, 'T_EXTEND', true),
                            28 =>
new \Railt\Compiler\Parser\Rule\Token(28, 'T_FRAGMENT', true),
                            29 =>
new \Railt\Compiler\Parser\Rule\Alternation(29, [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,], null),
                            'NameWithReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithReserved', [29,], '#Name'),
                            31 =>
new \Railt\Compiler\Parser\Rule\Token(31, 'T_NAME', true),
                            32 =>
new \Railt\Compiler\Parser\Rule\Token(32, 'T_NAMESPACE', true),
                            33 =>
new \Railt\Compiler\Parser\Rule\Token(33, 'T_IMPORT', true),
                            34 =>
new \Railt\Compiler\Parser\Rule\Token(34, 'T_IMPORT_FROM', true),
                            35 =>
new \Railt\Compiler\Parser\Rule\Token(35, 'T_EXTENDS', true),
                            36 =>
new \Railt\Compiler\Parser\Rule\Token(36, 'T_IMPLEMENTS', true),
                            37 =>
new \Railt\Compiler\Parser\Rule\Token(37, 'T_ON', true),
                            38 =>
new \Railt\Compiler\Parser\Rule\Token(38, 'T_TYPE', true),
                            39 =>
new \Railt\Compiler\Parser\Rule\Token(39, 'T_ENUM', true),
                            40 =>
new \Railt\Compiler\Parser\Rule\Token(40, 'T_UNION', true),
                            41 =>
new \Railt\Compiler\Parser\Rule\Token(41, 'T_INPUT_UNION', true),
                            42 =>
new \Railt\Compiler\Parser\Rule\Token(42, 'T_INTERFACE', true),
                            43 =>
new \Railt\Compiler\Parser\Rule\Token(43, 'T_SCHEMA', true),
                            44 =>
new \Railt\Compiler\Parser\Rule\Token(44, 'T_SCALAR', true),
                            45 =>
new \Railt\Compiler\Parser\Rule\Token(45, 'T_DIRECTIVE', true),
                            46 =>
new \Railt\Compiler\Parser\Rule\Token(46, 'T_INPUT', true),
                            47 =>
new \Railt\Compiler\Parser\Rule\Token(47, 'T_EXTEND', true),
                            48 =>
new \Railt\Compiler\Parser\Rule\Token(48, 'T_FRAGMENT', true),
                            'NameExceptValues' =>
new \Railt\Compiler\Parser\Rule\Alternation('NameExceptValues', [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,], null),
                            50 =>
new \Railt\Compiler\Parser\Rule\Token(50, 'T_VARIABLE', true),
                            'Variable' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Variable', [50,], '#Variable'),
                            52 =>
new \Railt\Compiler\Parser\Rule\Repetition(52, 0, 1, ['TypeNamespace',], null),
                            'TypeName' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeName', [52,'NameWithReserved',], '#TypeName'),
                            54 =>
new \Railt\Compiler\Parser\Rule\Token(54, 'T_NAMESPACE_SEPARATOR', false),
                            55 =>
new \Railt\Compiler\Parser\Rule\Concatenation(55, ['NameWithReserved',54,], '#TypeNamespace'),
                            'TypeNamespace' =>
new \Railt\Compiler\Parser\Rule\Repetition('TypeNamespace', 1, -1, [55,], null),
                            57 =>
new \Railt\Compiler\Parser\Rule\Token(57, 'T_FALSE', true),
                            58 =>
new \Railt\Compiler\Parser\Rule\Concatenation(58, [57,], '#Boolean'),
                            59 =>
new \Railt\Compiler\Parser\Rule\Token(59, 'T_TRUE', true),
                            60 =>
new \Railt\Compiler\Parser\Rule\Concatenation(60, [59,], '#Boolean'),
                            'Boolean' =>
new \Railt\Compiler\Parser\Rule\Alternation('Boolean', [58,60,], null),
                            62 =>
new \Railt\Compiler\Parser\Rule\Token(62, 'T_NUMBER', true),
                            'Number' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Number', [62,], '#Number'),
                            64 =>
new \Railt\Compiler\Parser\Rule\Token(64, 'T_BLOCK_STRING', true),
                            65 =>
new \Railt\Compiler\Parser\Rule\Concatenation(65, [64,], '#String'),
                            66 =>
new \Railt\Compiler\Parser\Rule\Token(66, 'T_STRING', true),
                            67 =>
new \Railt\Compiler\Parser\Rule\Concatenation(67, [66,], '#String'),
                            'String' =>
new \Railt\Compiler\Parser\Rule\Alternation('String', [65,67,], null),
                            69 =>
new \Railt\Compiler\Parser\Rule\Token(69, 'T_NULL', true),
                            'Null' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Null', [69,], '#Null'),
                            71 =>
new \Railt\Compiler\Parser\Rule\Token(71, 'T_BRACE_OPEN', false),
                            72 =>
new \Railt\Compiler\Parser\Rule\Repetition(72, 0, -1, ['__inputPair',], null),
                            73 =>
new \Railt\Compiler\Parser\Rule\Token(73, 'T_BRACE_CLOSE', false),
                            'Input' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Input', [71,72,73,], '#Input'),
                            75 =>
new \Railt\Compiler\Parser\Rule\Token(75, 'T_COLON', false),
                            '__inputPair' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputPair', ['NameWithReserved',75,'Value',], '#Pair'),
                            77 =>
new \Railt\Compiler\Parser\Rule\Token(77, 'T_BRACKET_OPEN', false),
                            78 =>
new \Railt\Compiler\Parser\Rule\Repetition(78, 0, -1, ['Value',], null),
                            79 =>
new \Railt\Compiler\Parser\Rule\Token(79, 'T_BRACKET_CLOSE', false),
                            'List' =>
new \Railt\Compiler\Parser\Rule\Concatenation('List', [77,78,79,], '#List'),
                            81 =>
new \Railt\Compiler\Parser\Rule\Concatenation(81, ['NameWithReserved',], '#Value'),
                            82 =>
new \Railt\Compiler\Parser\Rule\Concatenation(82, ['Boolean',], '#Value'),
                            83 =>
new \Railt\Compiler\Parser\Rule\Concatenation(83, ['Number',], '#Value'),
                            84 =>
new \Railt\Compiler\Parser\Rule\Concatenation(84, ['String',], '#Value'),
                            85 =>
new \Railt\Compiler\Parser\Rule\Concatenation(85, ['Input',], '#Value'),
                            86 =>
new \Railt\Compiler\Parser\Rule\Concatenation(86, ['Null',], '#Value'),
                            87 =>
new \Railt\Compiler\Parser\Rule\Concatenation(87, ['List',], '#Value'),
                            'Value' =>
new \Railt\Compiler\Parser\Rule\Alternation('Value', [81,82,83,84,85,86,87,], null),
                            89 =>
new \Railt\Compiler\Parser\Rule\Token(89, 'T_NAMESPACE', false),
                            'NamespaceDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NamespaceDefinition', [89,'TypeName',], '#NamespaceDefinition'),
                            91 =>
new \Railt\Compiler\Parser\Rule\Token(91, 'T_IMPORT', false),
                            'ImportDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ImportDefinition', [91,'__importTypeNames','__importDefinitionFrom',], '#ImportDefinition'),
                            93 =>
new \Railt\Compiler\Parser\Rule\Token(93, 'T_AND', false),
                            94 =>
new \Railt\Compiler\Parser\Rule\Concatenation(94, [93,'TypeName',], null),
                            95 =>
new \Railt\Compiler\Parser\Rule\Repetition(95, 0, -1, [94,], null),
                            '__importTypeNames' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__importTypeNames', ['TypeName',95,], '#ImportTarget'),
                            97 =>
new \Railt\Compiler\Parser\Rule\Token(97, 'T_IMPORT_FROM', false),
                            '__importDefinitionFrom' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__importDefinitionFrom', [97,'TypeName',], '#ImportFrom'),
                            'Documentation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Documentation', ['String',], '#Description'),
                            100 =>
new \Railt\Compiler\Parser\Rule\Concatenation(100, ['__returnListDefinition',], '#ReturnTypeDefinition'),
                            101 =>
new \Railt\Compiler\Parser\Rule\Concatenation(101, ['__returnTypeDefinition',], '#ReturnTypeDefinition'),
                            'ReturnTypeDefinition' =>
new \Railt\Compiler\Parser\Rule\Alternation('ReturnTypeDefinition', [100,101,], null),
                            103 =>
new \Railt\Compiler\Parser\Rule\Token(103, 'T_NON_NULL', true),
                            '__returnTypeNonNullModifier' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeNonNullModifier', [103,], '#NonNull'),
                            105 =>
new \Railt\Compiler\Parser\Rule\Token(105, 'T_BRACKET_OPEN', false),
                            106 =>
new \Railt\Compiler\Parser\Rule\Token(106, 'T_BRACKET_CLOSE', false),
                            107 =>
new \Railt\Compiler\Parser\Rule\Repetition(107, 0, 1, ['__returnTypeNonNullModifier',], null),
                            '__returnListDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnListDefinition', [105,'__returnTypeDefinition',106,107,], '#List'),
                            109 =>
new \Railt\Compiler\Parser\Rule\Repetition(109, 0, 1, ['__returnTypeDefinitionArguments',], null),
                            110 =>
new \Railt\Compiler\Parser\Rule\Concatenation(110, ['TypeName',109,], null),
                            111 =>
new \Railt\Compiler\Parser\Rule\Alternation(111, [110,'Variable',], null),
                            112 =>
new \Railt\Compiler\Parser\Rule\Repetition(112, 0, 1, ['__returnTypeNonNullModifier',], null),
                            '__returnTypeDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeDefinition', [111,112,], '#Type'),
                            114 =>
new \Railt\Compiler\Parser\Rule\Token(114, 'T_PARENTHESIS_OPEN', false),
                            115 =>
new \Railt\Compiler\Parser\Rule\Repetition(115, 0, -1, ['ArgumentDefinition',], null),
                            116 =>
new \Railt\Compiler\Parser\Rule\Token(116, 'T_PARENTHESIS_CLOSE', false),
                            '__returnTypeDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeDefinitionArguments', [114,115,116,], '#TypeArguments'),
                            118 =>
new \Railt\Compiler\Parser\Rule\Token(118, 'T_IMPLEMENTS', false),
                            119 =>
new \Railt\Compiler\Parser\Rule\Token(119, 'T_AND', false),
                            120 =>
new \Railt\Compiler\Parser\Rule\Concatenation(120, [119,'TypeName',], null),
                            121 =>
new \Railt\Compiler\Parser\Rule\Repetition(121, 0, -1, [120,], null),
                            'TypeDefinitionImplements' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeDefinitionImplements', [118,'TypeName',121,], null),
                            123 =>
new \Railt\Compiler\Parser\Rule\Token(123, 'T_PARENTHESIS_OPEN', false),
                            124 =>
new \Railt\Compiler\Parser\Rule\Repetition(124, 0, -1, ['__genericArgumentDefinition',], null),
                            125 =>
new \Railt\Compiler\Parser\Rule\Token(125, 'T_PARENTHESIS_CLOSE', false),
                            'GenericArgumentsDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('GenericArgumentsDefinition', [123,124,125,], null),
                            127 =>
new \Railt\Compiler\Parser\Rule\Token(127, 'T_COLON', false),
                            '__genericArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__genericArgumentDefinition', ['Variable',127,'TypeName',], '#GenericArgument'),
                            129 =>
new \Railt\Compiler\Parser\Rule\Repetition(129, 0, 1, ['Documentation',], null),
                            130 =>
new \Railt\Compiler\Parser\Rule\Token(130, 'T_COLON', false),
                            131 =>
new \Railt\Compiler\Parser\Rule\Repetition(131, 0, 1, ['__argumentDefinitionDefaultValue',], null),
                            'ArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentDefinition', [129,'NameWithReserved',130,'ReturnTypeDefinition',131,], '#ArgumentDefinition'),
                            133 =>
new \Railt\Compiler\Parser\Rule\Token(133, 'T_EQUAL', false),
                            '__argumentDefinitionDefaultValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__argumentDefinitionDefaultValue', [133,'Value',], null),
                            135 =>
new \Railt\Compiler\Parser\Rule\Repetition(135, 0, 1, ['Documentation',], null),
                            136 =>
new \Railt\Compiler\Parser\Rule\Repetition(136, 0, 1, ['__fieldDefinitionArguments',], null),
                            137 =>
new \Railt\Compiler\Parser\Rule\Token(137, 'T_COLON', false),
                            138 =>
new \Railt\Compiler\Parser\Rule\Repetition(138, 0, -1, ['Directive',], null),
                            'FieldDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('FieldDefinition', [135,'NameWithReserved',136,137,'ReturnTypeDefinition',138,], '#FieldDefinition'),
                            140 =>
new \Railt\Compiler\Parser\Rule\Token(140, 'T_PARENTHESIS_OPEN', false),
                            141 =>
new \Railt\Compiler\Parser\Rule\Repetition(141, 0, -1, ['__fieldDefinitionArgument',], null),
                            142 =>
new \Railt\Compiler\Parser\Rule\Token(142, 'T_PARENTHESIS_CLOSE', false),
                            '__fieldDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArguments', [140,141,142,], null),
                            144 =>
new \Railt\Compiler\Parser\Rule\Repetition(144, 0, -1, ['Directive',], null),
                            '__fieldDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition',144,], null),
                            146 =>
new \Railt\Compiler\Parser\Rule\Repetition(146, 0, 1, ['Documentation',], null),
                            'DirectiveDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinition', [146,'DirectiveDefinitionBody',], '#DirectiveDefinition'),
                            148 =>
new \Railt\Compiler\Parser\Rule\Token(148, 'T_DIRECTIVE', false),
                            149 =>
new \Railt\Compiler\Parser\Rule\Token(149, 'T_DIRECTIVE_AT', false),
                            150 =>
new \Railt\Compiler\Parser\Rule\Repetition(150, 0, 1, ['__directiveDefinitionArguments',], null),
                            151 =>
new \Railt\Compiler\Parser\Rule\Token(151, 'T_ON', false),
                            'DirectiveDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinitionBody', [148,149,'TypeName',150,151,'__directiveDefinitionLocations',], null),
                            153 =>
new \Railt\Compiler\Parser\Rule\Token(153, 'T_PARENTHESIS_OPEN', false),
                            154 =>
new \Railt\Compiler\Parser\Rule\Repetition(154, 0, -1, ['__directiveDefinitionArgument',], null),
                            155 =>
new \Railt\Compiler\Parser\Rule\Token(155, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArguments', [153,154,155,], null),
                            '__directiveDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition',], '#DirectiveArgument'),
                            158 =>
new \Railt\Compiler\Parser\Rule\Token(158, 'T_OR', false),
                            159 =>
new \Railt\Compiler\Parser\Rule\Repetition(159, 0, 1, [158,], null),
                            160 =>
new \Railt\Compiler\Parser\Rule\Repetition(160, 1, -1, ['__directiveDefinitionLocation',], null),
                            '__directiveDefinitionLocations' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocations', [159,160,], '#DirectiveLocations'),
                            162 =>
new \Railt\Compiler\Parser\Rule\Token(162, 'T_OR', false),
                            163 =>
new \Railt\Compiler\Parser\Rule\Concatenation(163, [162,'NameWithReserved',], null),
                            164 =>
new \Railt\Compiler\Parser\Rule\Repetition(164, 0, -1, [163,], null),
                            '__directiveDefinitionLocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocation', ['NameWithReserved',164,], null),
                            166 =>
new \Railt\Compiler\Parser\Rule\Repetition(166, 0, 1, ['Documentation',], null),
                            'EnumDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinition', [166,'EnumDefinitionHead','EnumDefinitionBody',], '#EnumDefinition'),
                            168 =>
new \Railt\Compiler\Parser\Rule\Token(168, 'T_ENUM', false),
                            169 =>
new \Railt\Compiler\Parser\Rule\Repetition(169, 0, -1, ['Directive',], null),
                            'EnumDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionHead', [168,'TypeName',169,], null),
                            171 =>
new \Railt\Compiler\Parser\Rule\Token(171, 'T_BRACE_OPEN', false),
                            172 =>
new \Railt\Compiler\Parser\Rule\Repetition(172, 1, -1, ['__enumDefinitionValue',], null),
                            173 =>
new \Railt\Compiler\Parser\Rule\Token(173, 'T_BRACE_CLOSE', false),
                            'EnumDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionBody', [171,172,173,], null),
                            175 =>
new \Railt\Compiler\Parser\Rule\Repetition(175, 0, 1, ['Documentation',], null),
                            176 =>
new \Railt\Compiler\Parser\Rule\Repetition(176, 0, -1, ['Directive',], null),
                            '__enumDefinitionValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__enumDefinitionValue', [175,'NameExceptValues',176,], '#EnumValue'),
                            178 =>
new \Railt\Compiler\Parser\Rule\Repetition(178, 0, 1, ['Documentation',], null),
                            'InputDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinition', [178,'InputDefinitionHead','InputDefinitionBody',], '#InputDefinition'),
                            180 =>
new \Railt\Compiler\Parser\Rule\Token(180, 'T_INPUT', false),
                            181 =>
new \Railt\Compiler\Parser\Rule\Repetition(181, 0, -1, ['Directive',], null),
                            'InputDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionHead', [180,'TypeName',181,], null),
                            183 =>
new \Railt\Compiler\Parser\Rule\Token(183, 'T_BRACE_OPEN', false),
                            184 =>
new \Railt\Compiler\Parser\Rule\Repetition(184, 0, -1, ['__inputDefinitionField',], null),
                            185 =>
new \Railt\Compiler\Parser\Rule\Token(185, 'T_BRACE_CLOSE', false),
                            'InputDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionBody', [183,184,185,], null),
                            187 =>
new \Railt\Compiler\Parser\Rule\Repetition(187, 0, -1, ['Directive',], null),
                            '__inputDefinitionField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputDefinitionField', ['ArgumentDefinition',187,], '#InputField'),
                            189 =>
new \Railt\Compiler\Parser\Rule\Repetition(189, 0, 1, ['Documentation',], null),
                            'InterfaceDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinition', [189,'InterfaceDefinitionHead','InterfaceDefinitionBody',], '#InterfaceDefinition'),
                            191 =>
new \Railt\Compiler\Parser\Rule\Token(191, 'T_INTERFACE', false),
                            192 =>
new \Railt\Compiler\Parser\Rule\Repetition(192, 0, 1, ['GenericArgumentsDefinition',], null),
                            193 =>
new \Railt\Compiler\Parser\Rule\Repetition(193, 0, 1, ['TypeDefinitionImplements',], null),
                            194 =>
new \Railt\Compiler\Parser\Rule\Repetition(194, 0, -1, ['Directive',], null),
                            'InterfaceDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionHead', [191,'TypeName',192,193,194,], null),
                            196 =>
new \Railt\Compiler\Parser\Rule\Token(196, 'T_BRACE_OPEN', false),
                            197 =>
new \Railt\Compiler\Parser\Rule\Repetition(197, 0, -1, ['FieldDefinition',], null),
                            198 =>
new \Railt\Compiler\Parser\Rule\Token(198, 'T_BRACE_CLOSE', false),
                            'InterfaceDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionBody', [196,197,198,], null),
                            200 =>
new \Railt\Compiler\Parser\Rule\Repetition(200, 0, 1, ['Documentation',], null),
                            'ObjectDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinition', [200,'ObjectDefinitionHead','ObjectDefinitionBody',], '#ObjectDefinition'),
                            202 =>
new \Railt\Compiler\Parser\Rule\Token(202, 'T_TYPE', false),
                            203 =>
new \Railt\Compiler\Parser\Rule\Repetition(203, 0, 1, ['GenericArgumentsDefinition',], null),
                            204 =>
new \Railt\Compiler\Parser\Rule\Repetition(204, 0, 1, ['TypeDefinitionImplements',], null),
                            205 =>
new \Railt\Compiler\Parser\Rule\Repetition(205, 0, -1, ['Directive',], null),
                            'ObjectDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionHead', [202,'TypeName',203,204,205,], null),
                            207 =>
new \Railt\Compiler\Parser\Rule\Token(207, 'T_BRACE_OPEN', false),
                            208 =>
new \Railt\Compiler\Parser\Rule\Repetition(208, 0, -1, ['FieldDefinition',], null),
                            209 =>
new \Railt\Compiler\Parser\Rule\Token(209, 'T_BRACE_CLOSE', false),
                            'ObjectDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionBody', [207,208,209,], null),
                            211 =>
new \Railt\Compiler\Parser\Rule\Repetition(211, 0, 1, ['Documentation',], null),
                            'ScalarDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinition', [211,'ScalarDefinitionBody',], '#ScalarDefinition'),
                            213 =>
new \Railt\Compiler\Parser\Rule\Token(213, 'T_SCALAR', false),
                            214 =>
new \Railt\Compiler\Parser\Rule\Repetition(214, 0, 1, ['__scalarExtends',], null),
                            215 =>
new \Railt\Compiler\Parser\Rule\Repetition(215, 0, -1, ['Directive',], null),
                            'ScalarDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinitionBody', [213,'TypeName',214,215,], null),
                            217 =>
new \Railt\Compiler\Parser\Rule\Token(217, 'T_EXTENDS', false),
                            '__scalarExtends' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__scalarExtends', [217,'TypeName',], '#Extends'),
                            219 =>
new \Railt\Compiler\Parser\Rule\Repetition(219, 0, 1, ['Documentation',], null),
                            'SchemaDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinition', [219,'SchemaDefinitionBody',], '#SchemaDefinition'),
                            221 =>
new \Railt\Compiler\Parser\Rule\Token(221, 'T_SCHEMA', false),
                            222 =>
new \Railt\Compiler\Parser\Rule\Repetition(222, 0, 1, ['TypeName',], null),
                            223 =>
new \Railt\Compiler\Parser\Rule\Token(223, 'T_BRACE_OPEN', false),
                            224 =>
new \Railt\Compiler\Parser\Rule\Repetition(224, 0, -1, ['__schemaField',], null),
                            225 =>
new \Railt\Compiler\Parser\Rule\Token(225, 'T_BRACE_CLOSE', false),
                            'SchemaDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinitionBody', [221,222,223,224,225,], null),
                            227 =>
new \Railt\Compiler\Parser\Rule\Token(227, 'T_COLON', false),
                            '__schemaField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__schemaField', ['NameWithReserved',227,'TypeName',], '#SchemaField'),
                            229 =>
new \Railt\Compiler\Parser\Rule\Repetition(229, 0, 1, ['Documentation',], null),
                            'UnionDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinition', [229,'UnionDefinitionBody',], '#UnionDefinition'),
                            231 =>
new \Railt\Compiler\Parser\Rule\Token(231, 'T_UNION', false),
                            232 =>
new \Railt\Compiler\Parser\Rule\Repetition(232, 0, -1, ['Directive',], null),
                            233 =>
new \Railt\Compiler\Parser\Rule\Token(233, 'T_EQUAL', false),
                            234 =>
new \Railt\Compiler\Parser\Rule\Token(234, 'T_OR', false),
                            235 =>
new \Railt\Compiler\Parser\Rule\Repetition(235, 0, 1, [234,], null),
                            236 =>
new \Railt\Compiler\Parser\Rule\Repetition(236, 1, -1, ['__unionDefinitionTargets',], null),
                            'UnionDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinitionBody', [231,'TypeName',232,233,235,236,], null),
                            238 =>
new \Railt\Compiler\Parser\Rule\Token(238, 'T_OR', false),
                            239 =>
new \Railt\Compiler\Parser\Rule\Concatenation(239, [238,'TypeName',], null),
                            240 =>
new \Railt\Compiler\Parser\Rule\Repetition(240, 0, -1, [239,], null),
                            '__unionDefinitionTargets' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__unionDefinitionTargets', ['TypeName',240,], null),
                            'Definition' =>
new \Railt\Compiler\Parser\Rule\Alternation('Definition', ['DirectiveDefinition','EnumDefinition','InputDefinition','InterfaceDefinition','ObjectDefinition','ScalarDefinition','SchemaDefinition','UnionDefinition',], null),
                            243 =>
new \Railt\Compiler\Parser\Rule\Token(243, 'T_EXTEND', false),
                            'EnumExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumExtension', [243,'__enumExtensionVariants',], '#EnumExtension'),
                            245 =>
new \Railt\Compiler\Parser\Rule\Concatenation(245, ['EnumDefinitionHead','EnumDefinitionBody',], null),
                            '__enumExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__enumExtensionVariants', ['EnumDefinitionHead',245,], null),
                            247 =>
new \Railt\Compiler\Parser\Rule\Token(247, 'T_EXTEND', false),
                            'InputExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputExtension', [247,'__inputExtensionVariants',], '#InputExtension'),
                            249 =>
new \Railt\Compiler\Parser\Rule\Concatenation(249, ['InputDefinitionHead','InputDefinitionBody',], null),
                            '__inputExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__inputExtensionVariants', ['InputDefinitionHead',249,], null),
                            251 =>
new \Railt\Compiler\Parser\Rule\Token(251, 'T_EXTEND', false),
                            'InterfaceExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceExtension', [251,'__interfaceExtensionVariants',], '#InterfaceExtension'),
                            253 =>
new \Railt\Compiler\Parser\Rule\Concatenation(253, ['InterfaceDefinitionHead','InterfaceDefinitionBody',], null),
                            '__interfaceExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead',253,], null),
                            255 =>
new \Railt\Compiler\Parser\Rule\Token(255, 'T_EXTEND', false),
                            'ObjectExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectExtension', [255,'__objectExtensionVariants',], '#ObjectExtension'),
                            257 =>
new \Railt\Compiler\Parser\Rule\Concatenation(257, ['ObjectDefinitionHead','ObjectDefinitionBody',], null),
                            '__objectExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__objectExtensionVariants', ['ObjectDefinitionHead',257,], null),
                            259 =>
new \Railt\Compiler\Parser\Rule\Token(259, 'T_EXTEND', false),
                            'ScalarExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarExtension', [259,'ScalarDefinitionBody',], '#ScalarExtension'),
                            261 =>
new \Railt\Compiler\Parser\Rule\Token(261, 'T_EXTEND', false),
                            'SchemaExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaExtension', [261,'SchemaDefinitionBody',], '#SchemaExtension'),
                            263 =>
new \Railt\Compiler\Parser\Rule\Token(263, 'T_EXTEND', false),
                            'UnionExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionExtension', [263,'UnionDefinitionBody',], '#UnionExtension'),
                            'Extension' =>
new \Railt\Compiler\Parser\Rule\Alternation('Extension', ['EnumExtension','InputExtension','InterfaceExtension','ObjectExtension','ScalarExtension','SchemaExtension','UnionExtension',], null),
                            266 =>
new \Railt\Compiler\Parser\Rule\Token(266, 'T_COLON', false),
                            'ArgumentInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentInvocation', ['NameWithReserved',266,'Value',], null),
                            268 =>
new \Railt\Compiler\Parser\Rule\Token(268, 'T_DIRECTIVE_AT', false),
                            269 =>
new \Railt\Compiler\Parser\Rule\Repetition(269, 0, 1, ['__directiveInvocationArguments',], null),
                            'Directive' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Directive', [268,'TypeName',269,], '#Directive'),
                            271 =>
new \Railt\Compiler\Parser\Rule\Token(271, 'T_PARENTHESIS_OPEN', false),
                            272 =>
new \Railt\Compiler\Parser\Rule\Repetition(272, 0, -1, ['__directiveInvocationArgument',], null),
                            273 =>
new \Railt\Compiler\Parser\Rule\Token(273, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveInvocationArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArguments', [271,272,273,], null),
                            '__directiveInvocationArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArgument', ['ArgumentInvocation',], '#DirectiveArgument'),
                            'Invocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Invocation', ['Directive',], null),
                    ]);
    }

    /**
     * @return string Returns the lexer compilation date and time in RFC3339 format
     */
    public function getBuiltDate(): string
    {
        return '2018-03-28MSK23:15:47.929+03:00';
    }
}
